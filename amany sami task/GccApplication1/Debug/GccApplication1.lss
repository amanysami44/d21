
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000850  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000880  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001462  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000991  00000000  00000000  00001ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b27  00000000  00000000  00002837  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  00003360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fe  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001797  00000000  00000000  00003b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000128  00000000  00000000  000052a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "util/delay.h"

int main(void)
{
	
	LED_INIT(L_LED);
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	0e 94 c3 00 	call	0x186	; 0x186 <LED_INIT>
	LED_INIT(M_LED);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 c3 00 	call	0x186	; 0x186 <LED_INIT>
	BUZZER_INIT();
  8e:	0e 94 b4 00 	call	0x168	; 0x168 <BUZZER_INIT>
	RELAY_INIT();
  92:	0e 94 2b 01 	call	0x256	; 0x256 <RELAY_INIT>
	P_B_INIT(P_B_2);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	0e 94 02 01 	call	0x204	; 0x204 <P_B_INIT>
	//	EXTERNAL_INT_0_INIT();  //We can use it  (BOUNCING)

	
	//at first led and buzzer are ON 
	  LED_ON(L_LED);
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_ON>
		BUZZER_ON();
  a2:	0e 94 b9 00 	call	0x172	; 0x172 <BUZZER_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	81 ee       	ldi	r24, 0xE1	; 225
  aa:	94 e0       	ldi	r25, 0x04	; 4
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2a>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x34>
  b6:	00 00       	nop
		_delay_ms(100);
		LED_OFF(L_LED);
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 ed 00 	call	0x1da	; 0x1da <LED_OFF>
		BUZZER_OFF();
  be:	0e 94 be 00 	call	0x17c	; 0x17c <BUZZER_OFF>
	
	while(1)
	{
		
			
	if(P_B_READ(P_B_2)==HIGH)
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 17 01 	call	0x22e	; 0x22e <P_B_READ>
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	a9 f4       	brne	.+42     	; 0xf6 <main+0x74>
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	81 ee       	ldi	r24, 0xE1	; 225
  d0:	94 e0       	ldi	r25, 0x04	; 4
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x50>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5a>
  dc:	00 00       	nop
	{ 
		_delay_ms(100);       //debouncing 
		if(P_B_READ(P_B_2)==HIGH)
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 17 01 	call	0x22e	; 0x22e <P_B_READ>
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	39 f4       	brne	.+14     	; 0xf6 <main+0x74>
		{
			while(P_B_READ(P_B_2)==HIGH)
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 17 01 	call	0x22e	; 0x22e <P_B_READ>
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	d9 f3       	breq	.-10     	; 0xe8 <main+0x66>
			{
				
			}
			RELAY_TOGGEL();
  f2:	0e 94 30 01 	call	0x260	; 0x260 <RELAY_TOGGEL>
		}
			
			
	}
	// led on while relay on 
	if(RELAY_READ()==HIGH)
  f6:	0e 94 34 01 	call	0x268	; 0x268 <RELAY_READ>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	19 f4       	brne	.+6      	; 0x104 <main+0x82>
	
	{
		LED_ON(M_LED);
  fe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_ON>
 102:	df cf       	rjmp	.-66     	; 0xc2 <main+0x40>
		
	}
	else 
	{
		LED_OFF(M_LED);
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 ed 00 	call	0x1da	; 0x1da <LED_OFF>
 10a:	db cf       	rjmp	.-74     	; 0xc2 <main+0x40>

0000010c <__vector_1>:
	
	}
}
	
ISR(INT0_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	4f 93       	push	r20
 11c:	5f 93       	push	r21
 11e:	6f 93       	push	r22
 120:	7f 93       	push	r23
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	af 93       	push	r26
 128:	bf 93       	push	r27
 12a:	ef 93       	push	r30
 12c:	ff 93       	push	r31
	RELAY_TOGGEL();
 12e:	0e 94 30 01 	call	0x260	; 0x260 <RELAY_TOGGEL>
	if(RELAY_READ()==HIGH)
 132:	0e 94 34 01 	call	0x268	; 0x268 <RELAY_READ>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	19 f4       	brne	.+6      	; 0x140 <__vector_1+0x34>
	
	{
		LED_ON(M_LED);
 13a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <LED_ON>
 13e:	03 c0       	rjmp	.+6      	; 0x146 <__vector_1+0x3a>
		
	}
	else
	{
		LED_OFF(M_LED);
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 ed 00 	call	0x1da	; 0x1da <LED_OFF>
	}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	bf 91       	pop	r27
 14c:	af 91       	pop	r26
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	7f 91       	pop	r23
 154:	6f 91       	pop	r22
 156:	5f 91       	pop	r21
 158:	4f 91       	pop	r20
 15a:	3f 91       	pop	r19
 15c:	2f 91       	pop	r18
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <BUZZER_INIT>:
#define  F_CPU 16000000UL
#include "util/delay.h"

void BUZZER_INIT      (void)
{
	PIN_MODE(BUZZER_PIN,OUTPUT);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	8b e2       	ldi	r24, 0x2B	; 43
 16c:	0e 94 38 01 	call	0x270	; 0x270 <PIN_MODE>
 170:	08 95       	ret

00000172 <BUZZER_ON>:
}
void BUZZER_ON        (void)
{
	PIN_WRITE(BUZZER_PIN,HIGH);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	8b e2       	ldi	r24, 0x2B	; 43
 176:	0e 94 27 02 	call	0x44e	; 0x44e <PIN_WRITE>
 17a:	08 95       	ret

0000017c <BUZZER_OFF>:
}
void BUZZER_OFF       (void)
{
	PIN_WRITE(BUZZER_PIN,LOW);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	8b e2       	ldi	r24, 0x2B	; 43
 180:	0e 94 27 02 	call	0x44e	; 0x44e <PIN_WRITE>
 184:	08 95       	ret

00000186 <LED_INIT>:
#include "LED_CFG.h"
#include "DIO.h"

void LED_INIT   (u8 led)
{
	switch(led)
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	49 f0       	breq	.+18     	; 0x19c <LED_INIT+0x16>
 18a:	18 f0       	brcs	.+6      	; 0x192 <LED_INIT+0xc>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	59 f0       	breq	.+22     	; 0x1a6 <LED_INIT+0x20>
 190:	08 95       	ret
	{
		case 0:
		PIN_MODE(R_LED_PIN,OUTPUT);
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	0e 94 38 01 	call	0x270	; 0x270 <PIN_MODE>
		break;
 19a:	08 95       	ret
		case 1:
		PIN_MODE(M_LED_PIN,OUTPUT);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	85 e2       	ldi	r24, 0x25	; 37
 1a0:	0e 94 38 01 	call	0x270	; 0x270 <PIN_MODE>
		break;
 1a4:	08 95       	ret
		case 2:
		PIN_MODE(L_LED_PIN,OUTPUT);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	87 e1       	ldi	r24, 0x17	; 23
 1aa:	0e 94 38 01 	call	0x270	; 0x270 <PIN_MODE>
 1ae:	08 95       	ret

000001b0 <LED_ON>:
		break;
	}
}
void LED_ON     (u8 led)
{
	switch(led)
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	49 f0       	breq	.+18     	; 0x1c6 <LED_ON+0x16>
 1b4:	18 f0       	brcs	.+6      	; 0x1bc <LED_ON+0xc>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	59 f0       	breq	.+22     	; 0x1d0 <LED_ON+0x20>
 1ba:	08 95       	ret
	{
		case 0:
		PIN_WRITE(R_LED_PIN,HIGH);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	80 e2       	ldi	r24, 0x20	; 32
 1c0:	0e 94 27 02 	call	0x44e	; 0x44e <PIN_WRITE>
		break;
 1c4:	08 95       	ret
		case 1:
		PIN_WRITE(M_LED_PIN,HIGH);
 1c6:	61 e0       	ldi	r22, 0x01	; 1
 1c8:	85 e2       	ldi	r24, 0x25	; 37
 1ca:	0e 94 27 02 	call	0x44e	; 0x44e <PIN_WRITE>
		break;
 1ce:	08 95       	ret
		case 2:
		PIN_WRITE(L_LED_PIN,HIGH);
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	87 e1       	ldi	r24, 0x17	; 23
 1d4:	0e 94 27 02 	call	0x44e	; 0x44e <PIN_WRITE>
 1d8:	08 95       	ret

000001da <LED_OFF>:
		break;
	}
}
void LED_OFF    (u8 led)
{
	switch(led)
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	49 f0       	breq	.+18     	; 0x1f0 <LED_OFF+0x16>
 1de:	18 f0       	brcs	.+6      	; 0x1e6 <LED_OFF+0xc>
 1e0:	82 30       	cpi	r24, 0x02	; 2
 1e2:	59 f0       	breq	.+22     	; 0x1fa <LED_OFF+0x20>
 1e4:	08 95       	ret
	{
		case 0:
		PIN_WRITE(R_LED_PIN,LOW);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	80 e2       	ldi	r24, 0x20	; 32
 1ea:	0e 94 27 02 	call	0x44e	; 0x44e <PIN_WRITE>
		break;
 1ee:	08 95       	ret
		case 1:
		PIN_WRITE(M_LED_PIN,LOW);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	85 e2       	ldi	r24, 0x25	; 37
 1f4:	0e 94 27 02 	call	0x44e	; 0x44e <PIN_WRITE>
		break;
 1f8:	08 95       	ret
		case 2:
		PIN_WRITE(L_LED_PIN,LOW);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	87 e1       	ldi	r24, 0x17	; 23
 1fe:	0e 94 27 02 	call	0x44e	; 0x44e <PIN_WRITE>
 202:	08 95       	ret

00000204 <P_B_INIT>:
#include "DIO.h"


void  P_B_INIT (u8 button)
{
	switch(button)
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	49 f0       	breq	.+18     	; 0x21a <P_B_INIT+0x16>
 208:	18 f0       	brcs	.+6      	; 0x210 <P_B_INIT+0xc>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	59 f0       	breq	.+22     	; 0x224 <P_B_INIT+0x20>
 20e:	08 95       	ret
	{
		case 0:
		PIN_MODE(BUTTON_0_PIN,INPUT);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	8a e0       	ldi	r24, 0x0A	; 10
 214:	0e 94 38 01 	call	0x270	; 0x270 <PIN_MODE>
		break;
 218:	08 95       	ret
		case 1:
		PIN_MODE(BUTTON_1_PIN,INPUT);
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	8e e0       	ldi	r24, 0x0E	; 14
 21e:	0e 94 38 01 	call	0x270	; 0x270 <PIN_MODE>
		break;
 222:	08 95       	ret
		case 2:
		PIN_MODE(BUTTON_2_PIN,INPUT);
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	86 e1       	ldi	r24, 0x16	; 22
 228:	0e 94 38 01 	call	0x270	; 0x270 <PIN_MODE>
 22c:	08 95       	ret

0000022e <P_B_READ>:
	}
}
u8 P_B_READ (u8 button)
{
	u8 value = 0;
	switch(button)
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	41 f0       	breq	.+16     	; 0x242 <P_B_READ+0x14>
 232:	18 f0       	brcs	.+6      	; 0x23a <P_B_READ+0xc>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	49 f0       	breq	.+18     	; 0x24a <P_B_READ+0x1c>
 238:	0c c0       	rjmp	.+24     	; 0x252 <P_B_READ+0x24>
	{
		case 0:
		value = PIN_READ(BUTTON_0_PIN);
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	0e 94 8c 03 	call	0x718	; 0x718 <PIN_READ>
		break;
 240:	08 95       	ret
		case 1:
		value = PIN_READ(BUTTON_1_PIN);
 242:	8e e0       	ldi	r24, 0x0E	; 14
 244:	0e 94 8c 03 	call	0x718	; 0x718 <PIN_READ>
		break;
 248:	08 95       	ret
		case 2:
		value = PIN_READ(BUTTON_2_PIN);
 24a:	86 e1       	ldi	r24, 0x16	; 22
 24c:	0e 94 8c 03 	call	0x718	; 0x718 <PIN_READ>
		break;
 250:	08 95       	ret
		break;
	}
}
u8 P_B_READ (u8 button)
{
	u8 value = 0;
 252:	80 e0       	ldi	r24, 0x00	; 0
		case 2:
		value = PIN_READ(BUTTON_2_PIN);
		break;
	}
	return value;	
}
 254:	08 95       	ret

00000256 <RELAY_INIT>:
{
	PIN_WRITE(RELAY_PIN,HIGH);
}
void RELAY_OFF  (void)
{
	PIN_WRITE(RELAY_PIN,LOW);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	8a e2       	ldi	r24, 0x2A	; 42
 25a:	0e 94 38 01 	call	0x270	; 0x270 <PIN_MODE>
 25e:	08 95       	ret

00000260 <RELAY_TOGGEL>:
}
void RELAY_TOGGEL (void)
{
	PIN_TOGGLE(RELAY_PIN);
 260:	8a e2       	ldi	r24, 0x2A	; 42
 262:	0e 94 16 03 	call	0x62c	; 0x62c <PIN_TOGGLE>
 266:	08 95       	ret

00000268 <RELAY_READ>:
	
}
u8 RELAY_READ (void)
{
	u8 value = 0;
	value= PIN_READ(RELAY_PIN);
 268:	8a e2       	ldi	r24, 0x2A	; 42
 26a:	0e 94 8c 03 	call	0x718	; 0x718 <PIN_READ>

	return value;
 26e:	08 95       	ret

00000270 <PIN_MODE>:
#include "STD_TYPES.h"
#include "REG.h"

void PIN_MODE (u8 pin,u8 mode)
{
	u8 port = pin / 10;
 270:	9d ec       	ldi	r25, 0xCD	; 205
 272:	89 9f       	mul	r24, r25
 274:	91 2d       	mov	r25, r1
 276:	11 24       	eor	r1, r1
 278:	96 95       	lsr	r25
 27a:	96 95       	lsr	r25
 27c:	96 95       	lsr	r25
	switch(mode)
 27e:	66 23       	and	r22, r22
 280:	09 f4       	brne	.+2      	; 0x284 <PIN_MODE+0x14>
 282:	72 c0       	rjmp	.+228    	; 0x368 <PIN_MODE+0xf8>
 284:	61 30       	cpi	r22, 0x01	; 1
 286:	09 f0       	breq	.+2      	; 0x28a <PIN_MODE+0x1a>
 288:	e1 c0       	rjmp	.+450    	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
	{
		case OUTPUT:
	    switch(port)
 28a:	92 30       	cpi	r25, 0x02	; 2
 28c:	21 f1       	breq	.+72     	; 0x2d6 <PIN_MODE+0x66>
 28e:	18 f4       	brcc	.+6      	; 0x296 <PIN_MODE+0x26>
 290:	91 30       	cpi	r25, 0x01	; 1
 292:	39 f0       	breq	.+14     	; 0x2a2 <PIN_MODE+0x32>
 294:	08 95       	ret
 296:	93 30       	cpi	r25, 0x03	; 3
 298:	c1 f1       	breq	.+112    	; 0x30a <PIN_MODE+0x9a>
 29a:	94 30       	cpi	r25, 0x04	; 4
 29c:	09 f4       	brne	.+2      	; 0x2a0 <PIN_MODE+0x30>
 29e:	4c c0       	rjmp	.+152    	; 0x338 <PIN_MODE+0xc8>
 2a0:	08 95       	ret
		{
			case 1:
			pin = pin % 10;
			SET_BIT(DIRECTION_REGISTER_B,pin);
 2a2:	47 b3       	in	r20, 0x17	; 23
 2a4:	9d ec       	ldi	r25, 0xCD	; 205
 2a6:	89 9f       	mul	r24, r25
 2a8:	91 2d       	mov	r25, r1
 2aa:	11 24       	eor	r1, r1
 2ac:	96 95       	lsr	r25
 2ae:	96 95       	lsr	r25
 2b0:	96 95       	lsr	r25
 2b2:	99 0f       	add	r25, r25
 2b4:	29 2f       	mov	r18, r25
 2b6:	22 0f       	add	r18, r18
 2b8:	22 0f       	add	r18, r18
 2ba:	92 0f       	add	r25, r18
 2bc:	89 1b       	sub	r24, r25
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	b9 01       	movw	r22, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <PIN_MODE+0x5a>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <PIN_MODE+0x56>
 2ce:	cb 01       	movw	r24, r22
 2d0:	84 2b       	or	r24, r20
 2d2:	87 bb       	out	0x17, r24	; 23
			break;
 2d4:	08 95       	ret
			case 2:
			pin = pin % 20;
			SET_BIT(DIRECTION_REGISTER_D,pin);
 2d6:	41 b3       	in	r20, 0x11	; 17
 2d8:	9d ec       	ldi	r25, 0xCD	; 205
 2da:	89 9f       	mul	r24, r25
 2dc:	91 2d       	mov	r25, r1
 2de:	11 24       	eor	r1, r1
 2e0:	92 95       	swap	r25
 2e2:	9f 70       	andi	r25, 0x0F	; 15
 2e4:	99 0f       	add	r25, r25
 2e6:	99 0f       	add	r25, r25
 2e8:	29 2f       	mov	r18, r25
 2ea:	22 0f       	add	r18, r18
 2ec:	22 0f       	add	r18, r18
 2ee:	92 0f       	add	r25, r18
 2f0:	89 1b       	sub	r24, r25
 2f2:	21 e0       	ldi	r18, 0x01	; 1
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	b9 01       	movw	r22, r18
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <PIN_MODE+0x8e>
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	8a 95       	dec	r24
 300:	e2 f7       	brpl	.-8      	; 0x2fa <PIN_MODE+0x8a>
 302:	cb 01       	movw	r24, r22
 304:	84 2b       	or	r24, r20
 306:	81 bb       	out	0x11, r24	; 17
			break;
 308:	08 95       	ret
			case 3:
			pin = pin % 30;
			SET_BIT(DIRECTION_REGISTER_C,pin);
 30a:	44 b3       	in	r20, 0x14	; 20
 30c:	99 e8       	ldi	r25, 0x89	; 137
 30e:	89 9f       	mul	r24, r25
 310:	91 2d       	mov	r25, r1
 312:	11 24       	eor	r1, r1
 314:	92 95       	swap	r25
 316:	9f 70       	andi	r25, 0x0F	; 15
 318:	7e e1       	ldi	r23, 0x1E	; 30
 31a:	97 9f       	mul	r25, r23
 31c:	80 19       	sub	r24, r0
 31e:	11 24       	eor	r1, r1
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <PIN_MODE+0xbc>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <PIN_MODE+0xb8>
 330:	cb 01       	movw	r24, r22
 332:	84 2b       	or	r24, r20
 334:	84 bb       	out	0x14, r24	; 20
			break;
 336:	08 95       	ret
			case 4:
			pin = pin % 40;
			SET_BIT(DIRECTION_REGISTER_A,pin);
 338:	4a b3       	in	r20, 0x1a	; 26
 33a:	9d ec       	ldi	r25, 0xCD	; 205
 33c:	89 9f       	mul	r24, r25
 33e:	91 2d       	mov	r25, r1
 340:	11 24       	eor	r1, r1
 342:	92 95       	swap	r25
 344:	96 95       	lsr	r25
 346:	97 70       	andi	r25, 0x07	; 7
 348:	78 e2       	ldi	r23, 0x28	; 40
 34a:	97 9f       	mul	r25, r23
 34c:	80 19       	sub	r24, r0
 34e:	11 24       	eor	r1, r1
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	b9 01       	movw	r22, r18
 356:	02 c0       	rjmp	.+4      	; 0x35c <PIN_MODE+0xec>
 358:	66 0f       	add	r22, r22
 35a:	77 1f       	adc	r23, r23
 35c:	8a 95       	dec	r24
 35e:	e2 f7       	brpl	.-8      	; 0x358 <PIN_MODE+0xe8>
 360:	cb 01       	movw	r24, r22
 362:	84 2b       	or	r24, r20
 364:	8a bb       	out	0x1a, r24	; 26
			break;	
 366:	08 95       	ret
		}
		break;
		
		case INPUT:
		switch(port)
 368:	92 30       	cpi	r25, 0x02	; 2
 36a:	29 f1       	breq	.+74     	; 0x3b6 <PIN_MODE+0x146>
 36c:	18 f4       	brcc	.+6      	; 0x374 <PIN_MODE+0x104>
 36e:	91 30       	cpi	r25, 0x01	; 1
 370:	39 f0       	breq	.+14     	; 0x380 <PIN_MODE+0x110>
 372:	08 95       	ret
 374:	93 30       	cpi	r25, 0x03	; 3
 376:	d1 f1       	breq	.+116    	; 0x3ec <PIN_MODE+0x17c>
 378:	94 30       	cpi	r25, 0x04	; 4
 37a:	09 f4       	brne	.+2      	; 0x37e <PIN_MODE+0x10e>
 37c:	4f c0       	rjmp	.+158    	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 37e:	08 95       	ret
		{
			case 1:
			pin = pin % 10;
			CLR_BIT(DIRECTION_REGISTER_B,pin);
 380:	47 b3       	in	r20, 0x17	; 23
 382:	9d ec       	ldi	r25, 0xCD	; 205
 384:	89 9f       	mul	r24, r25
 386:	91 2d       	mov	r25, r1
 388:	11 24       	eor	r1, r1
 38a:	96 95       	lsr	r25
 38c:	96 95       	lsr	r25
 38e:	96 95       	lsr	r25
 390:	99 0f       	add	r25, r25
 392:	29 2f       	mov	r18, r25
 394:	22 0f       	add	r18, r18
 396:	22 0f       	add	r18, r18
 398:	92 0f       	add	r25, r18
 39a:	89 1b       	sub	r24, r25
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <PIN_MODE+0x138>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	8a 95       	dec	r24
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <PIN_MODE+0x134>
 3ac:	cb 01       	movw	r24, r22
 3ae:	80 95       	com	r24
 3b0:	84 23       	and	r24, r20
 3b2:	87 bb       	out	0x17, r24	; 23
			break;
 3b4:	08 95       	ret
			case 2:
			pin = pin % 20;
			CLR_BIT(DIRECTION_REGISTER_D,pin);
 3b6:	41 b3       	in	r20, 0x11	; 17
 3b8:	9d ec       	ldi	r25, 0xCD	; 205
 3ba:	89 9f       	mul	r24, r25
 3bc:	91 2d       	mov	r25, r1
 3be:	11 24       	eor	r1, r1
 3c0:	92 95       	swap	r25
 3c2:	9f 70       	andi	r25, 0x0F	; 15
 3c4:	99 0f       	add	r25, r25
 3c6:	99 0f       	add	r25, r25
 3c8:	29 2f       	mov	r18, r25
 3ca:	22 0f       	add	r18, r18
 3cc:	22 0f       	add	r18, r18
 3ce:	92 0f       	add	r25, r18
 3d0:	89 1b       	sub	r24, r25
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	b9 01       	movw	r22, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <PIN_MODE+0x16e>
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	8a 95       	dec	r24
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <PIN_MODE+0x16a>
 3e2:	cb 01       	movw	r24, r22
 3e4:	80 95       	com	r24
 3e6:	84 23       	and	r24, r20
 3e8:	81 bb       	out	0x11, r24	; 17
			break;
 3ea:	08 95       	ret
			case 3:
			pin = pin % 30;
			CLR_BIT(DIRECTION_REGISTER_C,pin);
 3ec:	44 b3       	in	r20, 0x14	; 20
 3ee:	99 e8       	ldi	r25, 0x89	; 137
 3f0:	89 9f       	mul	r24, r25
 3f2:	91 2d       	mov	r25, r1
 3f4:	11 24       	eor	r1, r1
 3f6:	92 95       	swap	r25
 3f8:	9f 70       	andi	r25, 0x0F	; 15
 3fa:	7e e1       	ldi	r23, 0x1E	; 30
 3fc:	97 9f       	mul	r25, r23
 3fe:	80 19       	sub	r24, r0
 400:	11 24       	eor	r1, r1
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	80 95       	com	r24
 416:	84 23       	and	r24, r20
 418:	84 bb       	out	0x14, r24	; 20
			break;
 41a:	08 95       	ret
			case 4:
			pin = pin % 40;
			CLR_BIT(DIRECTION_REGISTER_A,pin);
 41c:	4a b3       	in	r20, 0x1a	; 26
 41e:	9d ec       	ldi	r25, 0xCD	; 205
 420:	89 9f       	mul	r24, r25
 422:	91 2d       	mov	r25, r1
 424:	11 24       	eor	r1, r1
 426:	92 95       	swap	r25
 428:	96 95       	lsr	r25
 42a:	97 70       	andi	r25, 0x07	; 7
 42c:	78 e2       	ldi	r23, 0x28	; 40
 42e:	97 9f       	mul	r25, r23
 430:	80 19       	sub	r24, r0
 432:	11 24       	eor	r1, r1
 434:	21 e0       	ldi	r18, 0x01	; 1
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	b9 01       	movw	r22, r18
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	66 0f       	add	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	8a 95       	dec	r24
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	cb 01       	movw	r24, r22
 446:	80 95       	com	r24
 448:	84 23       	and	r24, r20
 44a:	8a bb       	out	0x1a, r24	; 26
 44c:	08 95       	ret

0000044e <PIN_WRITE>:
		break;
	}
}
void PIN_WRITE (u8 pin,u8 status)
{
	u8 port = pin / 10;
 44e:	9d ec       	ldi	r25, 0xCD	; 205
 450:	89 9f       	mul	r24, r25
 452:	91 2d       	mov	r25, r1
 454:	11 24       	eor	r1, r1
 456:	96 95       	lsr	r25
 458:	96 95       	lsr	r25
 45a:	96 95       	lsr	r25
	switch(status)
 45c:	66 23       	and	r22, r22
 45e:	09 f4       	brne	.+2      	; 0x462 <PIN_WRITE+0x14>
 460:	72 c0       	rjmp	.+228    	; 0x546 <PIN_WRITE+0xf8>
 462:	61 30       	cpi	r22, 0x01	; 1
 464:	09 f0       	breq	.+2      	; 0x468 <PIN_WRITE+0x1a>
 466:	e1 c0       	rjmp	.+450    	; 0x62a <PIN_WRITE+0x1dc>
	{
		case HIGH:
		switch(port)
 468:	92 30       	cpi	r25, 0x02	; 2
 46a:	21 f1       	breq	.+72     	; 0x4b4 <PIN_WRITE+0x66>
 46c:	18 f4       	brcc	.+6      	; 0x474 <PIN_WRITE+0x26>
 46e:	91 30       	cpi	r25, 0x01	; 1
 470:	39 f0       	breq	.+14     	; 0x480 <PIN_WRITE+0x32>
 472:	08 95       	ret
 474:	93 30       	cpi	r25, 0x03	; 3
 476:	c1 f1       	breq	.+112    	; 0x4e8 <PIN_WRITE+0x9a>
 478:	94 30       	cpi	r25, 0x04	; 4
 47a:	09 f4       	brne	.+2      	; 0x47e <PIN_WRITE+0x30>
 47c:	4c c0       	rjmp	.+152    	; 0x516 <PIN_WRITE+0xc8>
 47e:	08 95       	ret
		{
			case 1:
			pin = pin % 10;
			SET_BIT(WRITE_DATA_REGISTER_B,pin);
 480:	48 b3       	in	r20, 0x18	; 24
 482:	9d ec       	ldi	r25, 0xCD	; 205
 484:	89 9f       	mul	r24, r25
 486:	91 2d       	mov	r25, r1
 488:	11 24       	eor	r1, r1
 48a:	96 95       	lsr	r25
 48c:	96 95       	lsr	r25
 48e:	96 95       	lsr	r25
 490:	99 0f       	add	r25, r25
 492:	29 2f       	mov	r18, r25
 494:	22 0f       	add	r18, r18
 496:	22 0f       	add	r18, r18
 498:	92 0f       	add	r25, r18
 49a:	89 1b       	sub	r24, r25
 49c:	21 e0       	ldi	r18, 0x01	; 1
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	b9 01       	movw	r22, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <PIN_WRITE+0x5a>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	8a 95       	dec	r24
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <PIN_WRITE+0x56>
 4ac:	cb 01       	movw	r24, r22
 4ae:	84 2b       	or	r24, r20
 4b0:	88 bb       	out	0x18, r24	; 24
			break;
 4b2:	08 95       	ret
			case 2:
			pin = pin % 20;
			SET_BIT(WRITE_DATA_REGISTER_D,pin);
 4b4:	42 b3       	in	r20, 0x12	; 18
 4b6:	9d ec       	ldi	r25, 0xCD	; 205
 4b8:	89 9f       	mul	r24, r25
 4ba:	91 2d       	mov	r25, r1
 4bc:	11 24       	eor	r1, r1
 4be:	92 95       	swap	r25
 4c0:	9f 70       	andi	r25, 0x0F	; 15
 4c2:	99 0f       	add	r25, r25
 4c4:	99 0f       	add	r25, r25
 4c6:	29 2f       	mov	r18, r25
 4c8:	22 0f       	add	r18, r18
 4ca:	22 0f       	add	r18, r18
 4cc:	92 0f       	add	r25, r18
 4ce:	89 1b       	sub	r24, r25
 4d0:	21 e0       	ldi	r18, 0x01	; 1
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	b9 01       	movw	r22, r18
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <PIN_WRITE+0x8e>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	8a 95       	dec	r24
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <PIN_WRITE+0x8a>
 4e0:	cb 01       	movw	r24, r22
 4e2:	84 2b       	or	r24, r20
 4e4:	82 bb       	out	0x12, r24	; 18
			break;
 4e6:	08 95       	ret
			case 3:
			pin = pin % 30;
			SET_BIT(WRITE_DATA_REGISTER_C,pin);
 4e8:	45 b3       	in	r20, 0x15	; 21
 4ea:	99 e8       	ldi	r25, 0x89	; 137
 4ec:	89 9f       	mul	r24, r25
 4ee:	91 2d       	mov	r25, r1
 4f0:	11 24       	eor	r1, r1
 4f2:	92 95       	swap	r25
 4f4:	9f 70       	andi	r25, 0x0F	; 15
 4f6:	7e e1       	ldi	r23, 0x1E	; 30
 4f8:	97 9f       	mul	r25, r23
 4fa:	80 19       	sub	r24, r0
 4fc:	11 24       	eor	r1, r1
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	b9 01       	movw	r22, r18
 504:	02 c0       	rjmp	.+4      	; 0x50a <PIN_WRITE+0xbc>
 506:	66 0f       	add	r22, r22
 508:	77 1f       	adc	r23, r23
 50a:	8a 95       	dec	r24
 50c:	e2 f7       	brpl	.-8      	; 0x506 <PIN_WRITE+0xb8>
 50e:	cb 01       	movw	r24, r22
 510:	84 2b       	or	r24, r20
 512:	85 bb       	out	0x15, r24	; 21
			break;
 514:	08 95       	ret
			case 4:
			pin = pin % 40;
			SET_BIT(WRITE_DATA_REGISTER_A,pin);
 516:	4b b3       	in	r20, 0x1b	; 27
 518:	9d ec       	ldi	r25, 0xCD	; 205
 51a:	89 9f       	mul	r24, r25
 51c:	91 2d       	mov	r25, r1
 51e:	11 24       	eor	r1, r1
 520:	92 95       	swap	r25
 522:	96 95       	lsr	r25
 524:	97 70       	andi	r25, 0x07	; 7
 526:	78 e2       	ldi	r23, 0x28	; 40
 528:	97 9f       	mul	r25, r23
 52a:	80 19       	sub	r24, r0
 52c:	11 24       	eor	r1, r1
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	b9 01       	movw	r22, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <PIN_WRITE+0xec>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	8a 95       	dec	r24
 53c:	e2 f7       	brpl	.-8      	; 0x536 <PIN_WRITE+0xe8>
 53e:	cb 01       	movw	r24, r22
 540:	84 2b       	or	r24, r20
 542:	8b bb       	out	0x1b, r24	; 27
			break;
 544:	08 95       	ret
		}
		break;
		
		case LOW:
		switch(port)
 546:	92 30       	cpi	r25, 0x02	; 2
 548:	29 f1       	breq	.+74     	; 0x594 <PIN_WRITE+0x146>
 54a:	18 f4       	brcc	.+6      	; 0x552 <PIN_WRITE+0x104>
 54c:	91 30       	cpi	r25, 0x01	; 1
 54e:	39 f0       	breq	.+14     	; 0x55e <PIN_WRITE+0x110>
 550:	08 95       	ret
 552:	93 30       	cpi	r25, 0x03	; 3
 554:	d1 f1       	breq	.+116    	; 0x5ca <PIN_WRITE+0x17c>
 556:	94 30       	cpi	r25, 0x04	; 4
 558:	09 f4       	brne	.+2      	; 0x55c <PIN_WRITE+0x10e>
 55a:	4f c0       	rjmp	.+158    	; 0x5fa <PIN_WRITE+0x1ac>
 55c:	08 95       	ret
		{
			case 1:
			pin = pin % 10;
			CLR_BIT(WRITE_DATA_REGISTER_B,pin);
 55e:	48 b3       	in	r20, 0x18	; 24
 560:	9d ec       	ldi	r25, 0xCD	; 205
 562:	89 9f       	mul	r24, r25
 564:	91 2d       	mov	r25, r1
 566:	11 24       	eor	r1, r1
 568:	96 95       	lsr	r25
 56a:	96 95       	lsr	r25
 56c:	96 95       	lsr	r25
 56e:	99 0f       	add	r25, r25
 570:	29 2f       	mov	r18, r25
 572:	22 0f       	add	r18, r18
 574:	22 0f       	add	r18, r18
 576:	92 0f       	add	r25, r18
 578:	89 1b       	sub	r24, r25
 57a:	21 e0       	ldi	r18, 0x01	; 1
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	b9 01       	movw	r22, r18
 580:	02 c0       	rjmp	.+4      	; 0x586 <PIN_WRITE+0x138>
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	8a 95       	dec	r24
 588:	e2 f7       	brpl	.-8      	; 0x582 <PIN_WRITE+0x134>
 58a:	cb 01       	movw	r24, r22
 58c:	80 95       	com	r24
 58e:	84 23       	and	r24, r20
 590:	88 bb       	out	0x18, r24	; 24
			break;
 592:	08 95       	ret
			case 2:
			pin = pin % 20;
			CLR_BIT(WRITE_DATA_REGISTER_D,pin);
 594:	42 b3       	in	r20, 0x12	; 18
 596:	9d ec       	ldi	r25, 0xCD	; 205
 598:	89 9f       	mul	r24, r25
 59a:	91 2d       	mov	r25, r1
 59c:	11 24       	eor	r1, r1
 59e:	92 95       	swap	r25
 5a0:	9f 70       	andi	r25, 0x0F	; 15
 5a2:	99 0f       	add	r25, r25
 5a4:	99 0f       	add	r25, r25
 5a6:	29 2f       	mov	r18, r25
 5a8:	22 0f       	add	r18, r18
 5aa:	22 0f       	add	r18, r18
 5ac:	92 0f       	add	r25, r18
 5ae:	89 1b       	sub	r24, r25
 5b0:	21 e0       	ldi	r18, 0x01	; 1
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	b9 01       	movw	r22, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <PIN_WRITE+0x16e>
 5b8:	66 0f       	add	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	8a 95       	dec	r24
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <PIN_WRITE+0x16a>
 5c0:	cb 01       	movw	r24, r22
 5c2:	80 95       	com	r24
 5c4:	84 23       	and	r24, r20
 5c6:	82 bb       	out	0x12, r24	; 18
			break;
 5c8:	08 95       	ret
			case 3:
			pin = pin % 30;
			CLR_BIT(WRITE_DATA_REGISTER_C,pin);
 5ca:	45 b3       	in	r20, 0x15	; 21
 5cc:	99 e8       	ldi	r25, 0x89	; 137
 5ce:	89 9f       	mul	r24, r25
 5d0:	91 2d       	mov	r25, r1
 5d2:	11 24       	eor	r1, r1
 5d4:	92 95       	swap	r25
 5d6:	9f 70       	andi	r25, 0x0F	; 15
 5d8:	7e e1       	ldi	r23, 0x1E	; 30
 5da:	97 9f       	mul	r25, r23
 5dc:	80 19       	sub	r24, r0
 5de:	11 24       	eor	r1, r1
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <PIN_WRITE+0x19e>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	8a 95       	dec	r24
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <PIN_WRITE+0x19a>
 5f0:	cb 01       	movw	r24, r22
 5f2:	80 95       	com	r24
 5f4:	84 23       	and	r24, r20
 5f6:	85 bb       	out	0x15, r24	; 21
			break;
 5f8:	08 95       	ret
			case 4:
			pin = pin % 40;
			CLR_BIT(WRITE_DATA_REGISTER_A,pin);
 5fa:	4b b3       	in	r20, 0x1b	; 27
 5fc:	9d ec       	ldi	r25, 0xCD	; 205
 5fe:	89 9f       	mul	r24, r25
 600:	91 2d       	mov	r25, r1
 602:	11 24       	eor	r1, r1
 604:	92 95       	swap	r25
 606:	96 95       	lsr	r25
 608:	97 70       	andi	r25, 0x07	; 7
 60a:	78 e2       	ldi	r23, 0x28	; 40
 60c:	97 9f       	mul	r25, r23
 60e:	80 19       	sub	r24, r0
 610:	11 24       	eor	r1, r1
 612:	21 e0       	ldi	r18, 0x01	; 1
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	b9 01       	movw	r22, r18
 618:	02 c0       	rjmp	.+4      	; 0x61e <PIN_WRITE+0x1d0>
 61a:	66 0f       	add	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	8a 95       	dec	r24
 620:	e2 f7       	brpl	.-8      	; 0x61a <PIN_WRITE+0x1cc>
 622:	cb 01       	movw	r24, r22
 624:	80 95       	com	r24
 626:	84 23       	and	r24, r20
 628:	8b bb       	out	0x1b, r24	; 27
 62a:	08 95       	ret

0000062c <PIN_TOGGLE>:
}

void PIN_TOGGLE(u8 pin)
{
	u8 port = pin / 10;
	switch(port)
 62c:	9d ec       	ldi	r25, 0xCD	; 205
 62e:	89 9f       	mul	r24, r25
 630:	91 2d       	mov	r25, r1
 632:	11 24       	eor	r1, r1
 634:	96 95       	lsr	r25
 636:	96 95       	lsr	r25
 638:	96 95       	lsr	r25
 63a:	92 30       	cpi	r25, 0x02	; 2
 63c:	21 f1       	breq	.+72     	; 0x686 <PIN_TOGGLE+0x5a>
 63e:	18 f4       	brcc	.+6      	; 0x646 <PIN_TOGGLE+0x1a>
 640:	91 30       	cpi	r25, 0x01	; 1
 642:	39 f0       	breq	.+14     	; 0x652 <PIN_TOGGLE+0x26>
 644:	08 95       	ret
 646:	93 30       	cpi	r25, 0x03	; 3
 648:	c1 f1       	breq	.+112    	; 0x6ba <PIN_TOGGLE+0x8e>
 64a:	94 30       	cpi	r25, 0x04	; 4
 64c:	09 f4       	brne	.+2      	; 0x650 <PIN_TOGGLE+0x24>
 64e:	4c c0       	rjmp	.+152    	; 0x6e8 <PIN_TOGGLE+0xbc>
 650:	08 95       	ret
	{
		case 1:
		pin = pin % 10;
		TOG_BIT(WRITE_DATA_REGISTER_B,pin);
 652:	48 b3       	in	r20, 0x18	; 24
 654:	9d ec       	ldi	r25, 0xCD	; 205
 656:	89 9f       	mul	r24, r25
 658:	91 2d       	mov	r25, r1
 65a:	11 24       	eor	r1, r1
 65c:	96 95       	lsr	r25
 65e:	96 95       	lsr	r25
 660:	96 95       	lsr	r25
 662:	99 0f       	add	r25, r25
 664:	29 2f       	mov	r18, r25
 666:	22 0f       	add	r18, r18
 668:	22 0f       	add	r18, r18
 66a:	92 0f       	add	r25, r18
 66c:	89 1b       	sub	r24, r25
 66e:	21 e0       	ldi	r18, 0x01	; 1
 670:	30 e0       	ldi	r19, 0x00	; 0
 672:	b9 01       	movw	r22, r18
 674:	02 c0       	rjmp	.+4      	; 0x67a <PIN_TOGGLE+0x4e>
 676:	66 0f       	add	r22, r22
 678:	77 1f       	adc	r23, r23
 67a:	8a 95       	dec	r24
 67c:	e2 f7       	brpl	.-8      	; 0x676 <PIN_TOGGLE+0x4a>
 67e:	cb 01       	movw	r24, r22
 680:	84 27       	eor	r24, r20
 682:	88 bb       	out	0x18, r24	; 24
		break;
 684:	08 95       	ret
		case 2:
		pin = pin % 20;
		TOG_BIT(WRITE_DATA_REGISTER_D,pin);
 686:	42 b3       	in	r20, 0x12	; 18
 688:	9d ec       	ldi	r25, 0xCD	; 205
 68a:	89 9f       	mul	r24, r25
 68c:	91 2d       	mov	r25, r1
 68e:	11 24       	eor	r1, r1
 690:	92 95       	swap	r25
 692:	9f 70       	andi	r25, 0x0F	; 15
 694:	99 0f       	add	r25, r25
 696:	99 0f       	add	r25, r25
 698:	29 2f       	mov	r18, r25
 69a:	22 0f       	add	r18, r18
 69c:	22 0f       	add	r18, r18
 69e:	92 0f       	add	r25, r18
 6a0:	89 1b       	sub	r24, r25
 6a2:	21 e0       	ldi	r18, 0x01	; 1
 6a4:	30 e0       	ldi	r19, 0x00	; 0
 6a6:	b9 01       	movw	r22, r18
 6a8:	02 c0       	rjmp	.+4      	; 0x6ae <PIN_TOGGLE+0x82>
 6aa:	66 0f       	add	r22, r22
 6ac:	77 1f       	adc	r23, r23
 6ae:	8a 95       	dec	r24
 6b0:	e2 f7       	brpl	.-8      	; 0x6aa <PIN_TOGGLE+0x7e>
 6b2:	cb 01       	movw	r24, r22
 6b4:	84 27       	eor	r24, r20
 6b6:	82 bb       	out	0x12, r24	; 18
		break;
 6b8:	08 95       	ret
		case 3:
		pin = pin % 30;
		TOG_BIT(WRITE_DATA_REGISTER_C,pin);
 6ba:	45 b3       	in	r20, 0x15	; 21
 6bc:	99 e8       	ldi	r25, 0x89	; 137
 6be:	89 9f       	mul	r24, r25
 6c0:	91 2d       	mov	r25, r1
 6c2:	11 24       	eor	r1, r1
 6c4:	92 95       	swap	r25
 6c6:	9f 70       	andi	r25, 0x0F	; 15
 6c8:	7e e1       	ldi	r23, 0x1E	; 30
 6ca:	97 9f       	mul	r25, r23
 6cc:	80 19       	sub	r24, r0
 6ce:	11 24       	eor	r1, r1
 6d0:	21 e0       	ldi	r18, 0x01	; 1
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	b9 01       	movw	r22, r18
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <PIN_TOGGLE+0xb0>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	8a 95       	dec	r24
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <PIN_TOGGLE+0xac>
 6e0:	cb 01       	movw	r24, r22
 6e2:	84 27       	eor	r24, r20
 6e4:	85 bb       	out	0x15, r24	; 21
		break;
 6e6:	08 95       	ret
		case 4:
		pin = pin % 40;
		TOG_BIT(WRITE_DATA_REGISTER_A,pin);
 6e8:	4b b3       	in	r20, 0x1b	; 27
 6ea:	9d ec       	ldi	r25, 0xCD	; 205
 6ec:	89 9f       	mul	r24, r25
 6ee:	91 2d       	mov	r25, r1
 6f0:	11 24       	eor	r1, r1
 6f2:	92 95       	swap	r25
 6f4:	96 95       	lsr	r25
 6f6:	97 70       	andi	r25, 0x07	; 7
 6f8:	78 e2       	ldi	r23, 0x28	; 40
 6fa:	97 9f       	mul	r25, r23
 6fc:	80 19       	sub	r24, r0
 6fe:	11 24       	eor	r1, r1
 700:	21 e0       	ldi	r18, 0x01	; 1
 702:	30 e0       	ldi	r19, 0x00	; 0
 704:	b9 01       	movw	r22, r18
 706:	02 c0       	rjmp	.+4      	; 0x70c <PIN_TOGGLE+0xe0>
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	8a 95       	dec	r24
 70e:	e2 f7       	brpl	.-8      	; 0x708 <PIN_TOGGLE+0xdc>
 710:	cb 01       	movw	r24, r22
 712:	84 27       	eor	r24, r20
 714:	8b bb       	out	0x1b, r24	; 27
 716:	08 95       	ret

00000718 <PIN_READ>:

u8    PIN_READ (u8 pin)
{
	u8 port = pin / 10;
	u8 value = 0;
	switch(port)
 718:	9d ec       	ldi	r25, 0xCD	; 205
 71a:	89 9f       	mul	r24, r25
 71c:	91 2d       	mov	r25, r1
 71e:	11 24       	eor	r1, r1
 720:	96 95       	lsr	r25
 722:	96 95       	lsr	r25
 724:	96 95       	lsr	r25
 726:	92 30       	cpi	r25, 0x02	; 2
 728:	11 f1       	breq	.+68     	; 0x76e <PIN_READ+0x56>
 72a:	18 f4       	brcc	.+6      	; 0x732 <PIN_READ+0x1a>
 72c:	91 30       	cpi	r25, 0x01	; 1
 72e:	39 f0       	breq	.+14     	; 0x73e <PIN_READ+0x26>
 730:	61 c0       	rjmp	.+194    	; 0x7f4 <PIN_READ+0xdc>
 732:	93 30       	cpi	r25, 0x03	; 3
 734:	a1 f1       	breq	.+104    	; 0x79e <PIN_READ+0x86>
 736:	94 30       	cpi	r25, 0x04	; 4
 738:	09 f4       	brne	.+2      	; 0x73c <PIN_READ+0x24>
 73a:	46 c0       	rjmp	.+140    	; 0x7c8 <PIN_READ+0xb0>
 73c:	5b c0       	rjmp	.+182    	; 0x7f4 <PIN_READ+0xdc>
	{
		case 1:
		pin = pin % 10;
		value = GET_BIT(READ_DATA_REGISTER_B,pin);
 73e:	26 b3       	in	r18, 0x16	; 22
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	9d ec       	ldi	r25, 0xCD	; 205
 744:	89 9f       	mul	r24, r25
 746:	91 2d       	mov	r25, r1
 748:	11 24       	eor	r1, r1
 74a:	96 95       	lsr	r25
 74c:	96 95       	lsr	r25
 74e:	96 95       	lsr	r25
 750:	99 0f       	add	r25, r25
 752:	49 2f       	mov	r20, r25
 754:	44 0f       	add	r20, r20
 756:	44 0f       	add	r20, r20
 758:	94 0f       	add	r25, r20
 75a:	89 1b       	sub	r24, r25
 75c:	a9 01       	movw	r20, r18
 75e:	02 c0       	rjmp	.+4      	; 0x764 <PIN_READ+0x4c>
 760:	55 95       	asr	r21
 762:	47 95       	ror	r20
 764:	8a 95       	dec	r24
 766:	e2 f7       	brpl	.-8      	; 0x760 <PIN_READ+0x48>
 768:	ca 01       	movw	r24, r20
 76a:	81 70       	andi	r24, 0x01	; 1
		break;
 76c:	08 95       	ret
		case 2:
		pin = pin % 20;
		value = GET_BIT(READ_DATA_REGISTER_D,pin);
 76e:	20 b3       	in	r18, 0x10	; 16
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	9d ec       	ldi	r25, 0xCD	; 205
 774:	89 9f       	mul	r24, r25
 776:	91 2d       	mov	r25, r1
 778:	11 24       	eor	r1, r1
 77a:	92 95       	swap	r25
 77c:	9f 70       	andi	r25, 0x0F	; 15
 77e:	99 0f       	add	r25, r25
 780:	99 0f       	add	r25, r25
 782:	49 2f       	mov	r20, r25
 784:	44 0f       	add	r20, r20
 786:	44 0f       	add	r20, r20
 788:	94 0f       	add	r25, r20
 78a:	89 1b       	sub	r24, r25
 78c:	a9 01       	movw	r20, r18
 78e:	02 c0       	rjmp	.+4      	; 0x794 <PIN_READ+0x7c>
 790:	55 95       	asr	r21
 792:	47 95       	ror	r20
 794:	8a 95       	dec	r24
 796:	e2 f7       	brpl	.-8      	; 0x790 <PIN_READ+0x78>
 798:	ca 01       	movw	r24, r20
 79a:	81 70       	andi	r24, 0x01	; 1
		break;
 79c:	08 95       	ret
		case 3:
		pin = pin % 30;
		value = GET_BIT(READ_DATA_REGISTER_C,pin);
 79e:	23 b3       	in	r18, 0x13	; 19
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	99 e8       	ldi	r25, 0x89	; 137
 7a4:	89 9f       	mul	r24, r25
 7a6:	91 2d       	mov	r25, r1
 7a8:	11 24       	eor	r1, r1
 7aa:	92 95       	swap	r25
 7ac:	9f 70       	andi	r25, 0x0F	; 15
 7ae:	5e e1       	ldi	r21, 0x1E	; 30
 7b0:	95 9f       	mul	r25, r21
 7b2:	80 19       	sub	r24, r0
 7b4:	11 24       	eor	r1, r1
 7b6:	a9 01       	movw	r20, r18
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <PIN_READ+0xa6>
 7ba:	55 95       	asr	r21
 7bc:	47 95       	ror	r20
 7be:	8a 95       	dec	r24
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <PIN_READ+0xa2>
 7c2:	ca 01       	movw	r24, r20
 7c4:	81 70       	andi	r24, 0x01	; 1
		break;
 7c6:	08 95       	ret
		case 4:
		pin = pin % 40;
		value = GET_BIT(READ_DATA_REGISTER_A,pin);
 7c8:	29 b3       	in	r18, 0x19	; 25
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	9d ec       	ldi	r25, 0xCD	; 205
 7ce:	89 9f       	mul	r24, r25
 7d0:	91 2d       	mov	r25, r1
 7d2:	11 24       	eor	r1, r1
 7d4:	92 95       	swap	r25
 7d6:	96 95       	lsr	r25
 7d8:	97 70       	andi	r25, 0x07	; 7
 7da:	58 e2       	ldi	r21, 0x28	; 40
 7dc:	95 9f       	mul	r25, r21
 7de:	80 19       	sub	r24, r0
 7e0:	11 24       	eor	r1, r1
 7e2:	a9 01       	movw	r20, r18
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <PIN_READ+0xd2>
 7e6:	55 95       	asr	r21
 7e8:	47 95       	ror	r20
 7ea:	8a 95       	dec	r24
 7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <PIN_READ+0xce>
 7ee:	ca 01       	movw	r24, r20
 7f0:	81 70       	andi	r24, 0x01	; 1
		break;
 7f2:	08 95       	ret
}

u8    PIN_READ (u8 pin)
{
	u8 port = pin / 10;
	u8 value = 0;
 7f4:	80 e0       	ldi	r24, 0x00	; 0
		pin = pin % 40;
		value = GET_BIT(READ_DATA_REGISTER_A,pin);
		break;
	}
    return value;
}
 7f6:	08 95       	ret

000007f8 <_exit>:
 7f8:	f8 94       	cli

000007fa <__stop_program>:
 7fa:	ff cf       	rjmp	.-2      	; 0x7fa <__stop_program>
